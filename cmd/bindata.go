// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/report.gohtml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReportGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6f\x6f\xdb\xbc\x11\x7f\x9f\x4f\x71\x55\xd0\xc6\x59\x6c\xc9\x35\x9c\x3f\x53\x6c\xaf\x4b\xdb\x15\xc3\x52\x64\x48\xdd\x0d\x43\x90\x17\xb4\x48\xdb\x5c\x28\x52\x20\x4f\x8e\x3c\xc3\xdf\x7d\xa0\x24\xdb\x92\x22\x27\x6d\x92\xe7\xe9\xd3\xa0\x30\x60\x49\x77\xc7\xbb\xe3\xef\xf8\x13\x4f\x52\xef\xd5\x87\x8b\xf7\xc3\xff\xfc\xf3\x23\x4c\x31\x14\x83\x9d\x9e\x3d\x80\x20\x72\xd2\x77\x98\x74\xac\x80\x11\x3a\xd8\x01\x00\xe8\x85\x0c\x09\x04\x53\xa2\x0d\xc3\xbe\x13\xe3\xb8\x75\xe2\xe4\x2a\xe4\x28\xd8\xe0\x5f\x9d\x2f\x48\x10\x2e\x59\xa4\x34\xf6\xbc\x4c\x98\x19\x98\x40\xf3\x08\xc1\xe8\xa0\xef\x4c\x11\x23\xe3\x7b\x5e\x40\xa5\xfb\x5f\x43\x99\xe0\x33\xed\x4a\x86\x9e\x8c\x42\x8f\xd9\x00\x68\xde\x1d\xba\x6f\xdd\xb6\x47\xb9\xc1\x95\xc8\x0d\xb9\xb5\x77\x06\x3d\x2f\xf3\x96\xbb\x16\x5c\xde\x80\x66\xa2\xef\x18\x9c\x0b\x66\xa6\x8c\xa1\x03\x53\xcd\xc6\x0f\x84\x1a\x29\x85\x06\x35\x89\xde\x75\xdd\xa3\x55\xb0\xc0\x98\x8d\x22\x0d\x19\x18\x63\x81\xf0\x32\x24\x7a\x23\x45\xe7\x83\x9d\x1e\xe5\x33\x08\x04\x31\xa6\xef\x04\x4a\x22\xe1\x92\xe9\xd6\x58\xc4\x9c\x3a\x83\x9d\x2c\xb1\x82\x89\x1d\xcb\x74\x6b\xa4\x92\x1c\xb1\xaa\x41\x14\x0b\xd1\xd2\x7c\x32\xc5\x82\x41\x6a\x34\xed\xae\x6c\xe2\x88\x12\x64\x2d\xe4\x21\xab\x18\x65\x10\x47\x44\x0e\xce\x89\x41\xc8\x0c\xa9\x0f\x3d\x2f\x15\x6e\xb1\x5d\x2c\xdc\x0f\x04\xd9\x72\x59\x67\xd6\xf3\xa6\xdd\x42\xaa\x1e\xe5\xb3\x1c\xef\xc2\x69\x61\x02\x13\x26\x99\x26\xa2\x3a\xc5\x69\x77\x70\x31\xb3\x0a\x01\x76\x6d\x70\x83\x3c\x30\x15\xdf\x35\x5e\x38\xb2\xd0\x54\x91\x28\xd8\x69\x75\x5b\x07\x41\xa9\x28\xa2\x15\xd2\x56\x07\xc2\xa4\x45\x62\x54\x35\xe6\x77\x82\x6b\x4e\x5b\xa1\xa2\xb1\xa8\xc3\x77\x5b\x90\x74\x95\x3b\x83\xcf\x4a\xe2\x54\xcc\x61\xa8\xc9\x78\xcc\x83\x02\x4a\xb5\x4e\x2c\xe0\xa5\xb8\x33\x22\x1c\x5b\x91\xa1\x42\x22\x72\x27\xf5\x95\xa9\xa9\xc9\xb7\x88\xff\x00\xd8\x5c\x26\xee\xd3\x70\xb9\x4c\x5e\x1a\x24\xc3\xa7\x42\x32\x7c\x31\x90\x7c\x35\x4c\x9b\x47\x83\x61\x47\xbf\x57\xb1\xc4\x97\x02\x47\x7a\x27\x4f\x97\xc9\xd3\xef\x29\xd9\x78\xeb\x31\x75\xf8\x52\x20\xfa\x94\xee\x16\xc8\x28\x9c\xcd\x1f\x07\x4e\xd6\xb1\x3c\x0f\x1a\x15\xd1\xc3\x5b\x66\x44\x24\x13\x66\x4b\x43\x60\x77\x38\x48\x1b\x1a\xdb\x3d\xd8\xc6\xc0\x87\x6e\xbb\x1d\x25\xf7\xec\x8a\x39\xfe\x47\x0f\x6c\x8d\x69\xdc\x74\x8b\x75\x80\xd3\xbe\x23\x88\xc1\xd6\x2d\x63\x37\x2d\xb4\x77\x94\x56\xda\x6e\xad\x83\xdf\x72\x8a\x53\x1f\xde\xb6\xdb\xaf\x4f\x61\x95\x89\xbd\xb2\x8d\xd8\x43\x20\x3c\x7b\x86\xb1\x61\xfa\x39\x13\xac\x5e\xfe\x98\x0a\xe0\x94\x9b\x56\x68\xa9\xf9\xec\x13\x7c\xce\x0a\xfc\x36\x19\xde\x25\xca\xfa\x90\xf7\xda\xc5\x76\x7f\x46\x34\xd8\x64\xfe\xcd\xd8\xcd\x7b\x9b\x04\xf4\x61\xf5\x80\xc0\x25\xc7\x06\x55\x41\x1c\x32\x89\xee\x84\xe1\x47\xc1\xec\xe9\xd9\xfc\xef\xb4\xb1\x65\x99\xef\xef\x9f\xa6\x7e\x4b\x3e\x5d\xc3\xf0\x22\x42\xae\x64\x63\xb1\xce\x33\xbd\xe9\xf8\xb0\x28\xcd\x05\x59\x82\x3e\x38\xf9\x1d\xd6\xa4\x6e\xe0\x18\x28\x99\x1b\x67\x6d\xb8\x6c\x6e\x9c\x28\x25\x90\x47\x77\xdc\x68\x3e\x99\x30\xed\xc3\x1e\x49\xb8\xd9\x6b\x96\x94\x63\xa5\x43\x82\x68\xd5\xf9\xf0\xbf\xa5\x92\x3c\x68\x5d\x18\xc1\x26\x4c\x52\x1f\x16\x05\x59\xf2\xd7\x84\x1b\x1f\x16\x38\x8f\x98\x0f\x4e\x40\x90\x4d\x94\x9e\x3b\x05\x93\x79\x6e\x52\x0a\x6f\x33\x3a\x27\x23\x26\xaa\x8a\x4a\x6e\xd9\x69\xc9\x62\x59\x97\x1b\x25\x48\x0c\xc3\xaa\x37\xca\x43\x26\x0d\x57\xd2\xf8\x70\xb5\x67\x1f\x60\xf6\x9a\xb0\xa7\x13\xfb\x8f\xc9\xde\x75\x19\x13\xa3\x62\x1d\x30\x1f\xae\xee\x64\xb4\x58\x80\x26\x72\xc2\xc0\x3d\xcf\x4b\x7a\xc9\x02\xa5\xa9\x81\xe5\xf2\xae\xb1\x8d\xe3\x83\xb3\x7e\x14\x72\x9a\xa0\x13\x1f\x16\x0b\xd7\xf6\x9a\x4d\xc0\xec\xc2\x76\x59\xc5\x39\x14\x82\x31\x49\xab\x9e\xaf\xeb\xa6\x6d\x98\xe6\xcc\x54\x33\x5e\x55\x43\x70\xc9\x9c\x26\x98\x50\x29\xcb\x24\xd4\x31\xab\x84\xbb\xcf\x72\xa7\x1c\x79\x99\xaf\x69\xcb\x15\xcb\xd6\xc7\xf2\xa4\xc0\xf4\x15\x4d\xd6\xee\x7e\x0e\x8a\xd8\xae\xf0\x45\xf2\xc3\xd6\xe1\xa9\xfc\xb0\xe0\xdc\xc7\x0d\x1b\x23\xe3\x86\xb5\xfc\x71\xdc\x18\x11\xed\x6c\x21\x43\xaa\xaa\x59\xfd\xeb\xe5\x1f\x66\xcf\x59\x5f\xbf\x9b\x05\xf5\x5b\xf2\x8a\x06\x55\xb7\x8f\x67\x83\x8d\x93\xb9\xfb\x45\x86\x9a\xdc\x7e\x37\x32\x7c\xde\x54\xf4\xa5\x73\x42\xac\x9e\x03\xbf\x9f\x15\xf5\x6d\x60\xb1\x87\x2a\x3b\x7e\xe2\x2e\xf1\x8b\x17\x3f\x9c\x17\xe7\xc5\x9a\xbe\x64\x66\x8c\x63\x19\xd8\x85\x5a\xdb\x63\x37\x22\xa2\x49\x68\x9a\x80\x3c\xb8\x61\xd8\x84\x80\x08\x31\x22\xc1\xcd\x7e\xa1\x00\x96\x5b\x3a\x81\x7e\x5e\xc4\x7c\xcc\x55\xfb\xda\x9d\x11\x11\x33\x57\x27\x39\x4f\x56\xc6\x78\x8f\x31\x16\x8d\x3d\x0f\x86\x17\x1f\x2e\x60\xc4\x48\x8c\x7c\x3c\x5f\x2b\x56\x69\x34\x56\x79\x55\xdd\xd8\xfe\x16\x0e\xc0\xe9\x8d\xb4\x37\x70\xec\xd9\x65\xe2\x83\x3d\xd1\x49\x59\x3e\xcc\xe5\xeb\xc0\xcb\xfb\x70\xb1\x35\xfe\x69\x41\xb1\x4b\xf5\x99\x40\xc9\x13\x4d\xfd\x56\xa7\x1d\x4b\x8e\xe6\x4b\x3c\x1e\xf3\x84\x19\xe8\xc3\x95\x73\xe6\x34\xc1\xf9\x07\x4f\x0f\x9f\xb3\xc3\xa7\xec\x30\xe4\x67\xce\xf5\xe9\x9d\xe1\xd0\x87\xf6\x46\x7a\x3b\xe5\x82\x41\x23\x55\xf4\xa0\x0b\x6f\xde\x40\x1a\x18\x06\x7d\xfb\xb4\xdd\xde\xaf\xdc\x0d\x32\xa5\x67\x95\x9d\xee\x69\x49\x65\x7d\x1c\x1c\x6c\x64\xcb\x52\x68\x9b\x6d\x8e\xb8\xfa\x82\x9a\xcb\x49\xa3\x52\x25\x0e\x7d\xb0\x9b\x05\x65\xc9\xc5\xb8\xe1\xb8\x4e\x41\xaf\x19\xc6\x5a\x82\x71\x4d\x3c\x32\xa8\x1b\xed\x26\x70\x18\x40\x1b\xfe\x02\x1c\x0e\xa0\x03\x3e\x18\x57\x30\x39\xc1\xe9\xbe\x05\x39\x45\xb8\x04\xd6\x95\xbd\xba\x5e\x21\xbe\xf9\xde\xd7\x4b\xdf\x37\x64\x2f\x02\x46\x8a\xce\x0b\xf3\xb5\x05\x9f\x68\x15\xdb\x1b\xf6\xee\xf8\x68\xdc\x19\x77\x4a\x15\xfb\x53\xd1\x56\x25\x2d\xc3\xff\xc7\xe5\xc4\x87\x91\xd2\xf9\x97\xb9\x92\xb9\xbb\xf9\x20\x57\x18\x38\x16\x8a\xa0\x0f\x99\xf8\x15\x0f\x23\xa5\x91\x48\x2c\x8f\x2c\xbc\xd2\x2c\x0c\x0d\x89\x9e\x70\xd9\x42\x15\xf9\x70\x18\x25\x1b\xb4\x22\x42\x69\x9a\xc9\x71\x51\x5a\x9a\x0e\x25\x94\xb2\xa3\x82\x32\xcb\x39\xf5\xd5\x8d\x12\x30\x4a\x70\x0a\xbb\x27\x27\x27\xc7\x27\xc7\x95\x69\xa4\xef\x18\xb7\xe4\xd1\x69\x47\xd5\x59\x67\xe6\xae\x56\xb7\xdf\x3c\xa6\x38\x5f\x77\xfd\x76\xb6\x88\x9a\x92\x68\xf1\x66\x3e\x9c\x1c\xbe\xde\x4c\x23\x50\x42\x69\x1f\x76\x0f\xbb\xf6\x57\xe3\x74\x46\x44\xd5\xcd\x6d\xfe\x72\x69\xa4\x04\x3d\xad\x8b\xd0\x39\xac\xe6\x57\xf8\x6c\xba\x25\xa9\xf6\xeb\xd3\xed\x51\xb6\xd6\x79\xf3\x8a\x6c\xeb\x32\x3c\xb6\xbf\x3b\xa5\x5e\x17\xee\xb4\xbc\x22\xa7\x84\xaa\x5b\x1f\xda\xd0\xb6\x2b\x04\x76\xff\x7c\x64\x7f\x05\x16\x64\x8b\xbf\xe7\x65\xdf\xea\xff\x1f\x00\x00\xff\xff\x70\xb1\xde\xe2\xbc\x1f\x00\x00")

func templatesReportGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesReportGohtml,
		"templates/report.gohtml",
	)
}

func templatesReportGohtml() (*asset, error) {
	bytes, err := templatesReportGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/report.gohtml", size: 8124, mode: os.FileMode(420), modTime: time.Unix(1619320053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/report.gohtml": templatesReportGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"report.gohtml": &bintree{templatesReportGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
